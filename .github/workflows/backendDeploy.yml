name: Deploy work flow for Amazon ECS

on:
  push:
    branches:
      - develop
env:
  AWS_REGION: ap-northeast-1
  WEBAPP_CONTAINER_NAME: body-record-rails
  WEBAPP_TAG: latest
  ECS_CLUSTER: body-record2
  ECS_SERVICE: body-record-service

permissions:
  contents: read

jobs:
  rspec:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    timeout-minutes: 10
    env:
      API_DOMAIN: "http://localhost"
    services:
      postgres:
        image: postgres:15.2
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.3"
          bundler-cache: true
    
      - name: Bundler and gem install
        run: |
          gem install bundler
          bundle install

      - name: Database migration
        run: |
          cp config/database.yml.ci config/database.yml
          bundle exec rails db:create RAILS_ENV=test
          bundle exec rails db:migrate RAILS_ENV=test

      - name: Run rspec
        run: bundle exec rspec

  deploy:
    name: deploy
    needs: rspec
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: webapp push to ECR
        id: build-image-webapp
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $WEBAPP_CONTAINER_NAME .
          docker tag $WEBAPP_CONTAINER_NAME:$WEBAPP_TAG $ECR_REGISTRY/$WEBAPP_CONTAINER_NAME:$WEBAPP_TAG
          docker push $ECR_REGISTRY/$WEBAPP_CONTAINER_NAME:$WEBAPP_TAG

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment
